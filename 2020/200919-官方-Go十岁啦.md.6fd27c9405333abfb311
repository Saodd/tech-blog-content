```json lw-blog-meta
{"title":"[官方] Go Turns 10","date":"2020-09-19","brev":"发布时间2019-11-8，Golang十周岁，开发团队的寄语。","tags":["Golang"],"path":"2020/200919-官方-Go十岁啦.md.6fd27c9405333abfb311"}
```


# Go Turns 10

[原文链接](https://blog.golang.org/10years)

Russ Cox, for the Go team  
8 November 2019

生日快乐！ GO！

[Renee French](https://twitter.com/reneefrench) 大佬说：

我回想起了2009年11月，我们正准备将Go与全世界分享的那会。我们那时候还不知道外界会对它做如何的反映，甚至是否有人会去关心这门小小的语言。但是我希望，即使到最后也没人使用Go，我们至少曾经为了一些很好的 idea 奋斗过，特别是Go对于并发(`concurrency`)和接口(`interface`)的实践，它们可能会对后续的编程语言产生一定的影响。

当很多人开始为Go着迷的时候，我开始回顾一些流行的语言的历史，例如 C, C++, Perl, Python 和 Ruby 等，思考它们花了多长的时间才变得真正被广泛采纳。比如，Perl 语言是在 1990s 年代中后期才大约发展成型的，但它首次发布是在1987年，因此，看起来基本上所有的语言都是需要默默地发展十几年 (decade)，伴随着一步一步地改进和传播，才能达到一个比较完全的程度。

因此我曾想过：经过十几年的发展之后的Go，会变成什么样子？

今天，我们可以回答这个问题：Go语言已经无处不在，已经至少被一百万以上的开发者所使用。

Go的最初的设计目标是 分布式系统基础设施 (`networked system infrastructure`)，也就是我们现在所谓的 云应用 (`cloud software`)。所有主流的云服务提供商如今都在使用由Go编写的云基础设施，例如 Docker, Etcd, Istio, Kubernetes, Prometheus 和 Terraform 等；另外，云原生计算基金会(`Cloud Native Computing Foundation` 简称 CNCF ) 的大部分的项目也都是由Go编写的。无数的公司都在使用Go语言来将他们的工作搬到云上，无论是创业公司还是正在做技术升级的大公司。此外，通过 GoBot 和 TinyGo ，Go甚至还在设计目标之外的领域也大放光彩，从诊断癌症到机器学习，无所不能。

因此可以说，Go语言已经比我们梦想得还更成功了。而且Go语言的成功并不仅仅是语言上的成功，更是生态系统上的，以及整个社区的成功。

在2009年，Go还是一个非常简陋的雏形：那时我们还在语句后面写分号，还没有go命令工具，没有垃圾回收，甚至只能在Linux和Mac上运行。

但是经过十年的发展，在全世界Go开发者的帮助下，如今的Go已经变成了一个高效的语言，它有着炫酷的工具集、工业品质的实现、最先机的垃圾回收、以及支持12种系统和10种架构的拓展。

> 译者注：一个很有意思的英文表达 state-of-the-art，有兴趣可以参考 [知乎 - 为什么英语中“state-of-the art”表示'最先进的"意思呢？](https://www.zhihu.com/question/23503643)

任何一门（成功的）编程语言都离不开一个繁荣的生态系统。选择开源，是生态系统的种子，但是更重要的还是靠广大开发者们贡献的辛勤和智慧，靠他们的教程、书籍、课程、博客，靠他们支持 `go get` 的开源项目，生态系统才得以繁荣。没有这样一个生态系统的帮助，Go不可能达到今天的高度。

当然，生态系统也离不开繁荣的社区。bla bla ……

> 译者注：难道只有我一个人觉得 `Women Who Go` 这个组织反而带来歧视色彩吗？

全世界有超过一百万的Go开发者，并且还有很多公司在源源不断地招募。很多人跟我们说是Go语言让他们在技术行业找到了第一份工作。总之，让我们最自豪的不是Go语言写的有多好，而是它给这么多人的生活带来的积极的影响。我们曾经的目标是创造一个可以帮助我们更好编程的语言，但是Go给了我们意外惊喜。

值此诞辰之际，我希望每个人都能为我们所取得的成绩而感到高兴。我谨代表Google的Go团队，向所有参与过我们的朋友表示感谢。让我们在接下来的十年里创造更多辉煌！

## 译者感言

其实这篇文章讲的都是一些废话hhhh

不过还是很振奋人心的。

学Go语言也有一段时间了，每当我想要向别人安利它的时候，我总是自我拷问：Go语言究竟好在哪里？

幸运的是，我的想法跟Go团队的想法是比较接近的：它好在它的并发，以及接口设计（契约式编程）。如果再与Python这种脚本语言相比的话，我还想加一点：它的静态类型，和严格的语法规范也很重要。

总之，Go语言已经十岁了，我也感到很高兴。正如大佬所说的，希望它在接下来的时间里继续前进！
