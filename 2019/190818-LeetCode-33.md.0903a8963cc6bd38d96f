```json lw-blog-meta
{"title":"LeetCode[33]: 搜索旋转排序数组","date":"2019-08-18","brev":"中等难度。但其实就是多个二分法组合在一起。","tags":["算法与数据结构"],"path":"2019/190818-LeetCode-33.md.0903a8963cc6bd38d96f"}
```



## 读题

```text
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4

示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

在有序数组上查找，就算题目不提示，也肯定是用二分法。

想法是用两次二分法，第一次找出旋转点在哪里，第二次查找目标值。

## 实现

```go
func search(nums []int, target int) int {
    switch len(nums) {
    case 0:
        return -1
    case 1:
        if target == nums[0] {
            return 0
        }
        return -1
    }

    var minId int = indexOfMin(nums)
    var maxId int
    if minId == 0 {
        maxId = len(nums) - 1
    } else {
        maxId = minId - 1
    }

    //fmt.Println(maxId)
    switch {
    case target > nums[maxId] || target < nums[minId]:
        return -1
    case target >= nums[0]:
        return binarySearch(nums[:maxId+1], target)
    default:
        if got := binarySearch(nums[minId:], target); got == -1 {
            return -1
        } else {
            return got + minId
        }
    }
}

func indexOfMin(nums []int) int {
    // 假设1：nums长度大于1
    // 假设2：nums没有重复元素
    var firstElem = nums[0]
    for left, right := 0, len(nums); ; {
        mid := (left + right) / 2
        if mid == left {
            if left == len(nums)-1{
                return 0
            }
            return left + 1
        }
        if nums[mid] > firstElem {
            left = mid
        } else {
            right = mid
        }
    }
}

func binarySearch(nums []int, target int) int {
    // 假设1：nums已经升序排列
    // 假设2：nums没有重复元素
    if len(nums) == 0 || nums[0] > target || nums[len(nums)-1] < target {
        return -1
    }
    for left, right := 0, len(nums); ; {
        mid := (left + right) / 2
        switch {
        case nums[mid] < target:
            if left == mid {
                return -1
            }
            left = mid
        case nums[mid] > target:
            right = mid
        default:
            return mid
        }
    }
}
```

提交成绩：

```text
执行用时 :4 ms, 在所有 Go 提交中击败了84.18%的用户
内存消耗 :2.6 MB, 在所有 Go 提交中击败了40.43%的用户
```

测试用例：

```go
{
    args:args{[]int{1,3}, 0},
    want:-1,
},
{
    args:args{[]int{4,5,6,7,0,1,2}, 0},
    want:4,
},
{
    args:args{[]int{4,5,6,7,0,1,2}, 3},
    want:-1,
},
```

值得说明的是，上面写的两个二分法函数都应该分别测试。

## 其他思路

其实应该是可以一次二分法完成任务的。上面是由于想要确保正确，所以还是用了两次二分法。

一次二分法的主要思路其实也很简单，假设三个变量是`left, mid, right`，那么每次二分判断向前还是向后的时候，要增加一次对于`mid`的判断，即判断mid是处于前半个升序数组中还是后半个升序数组中（根据left, right对应的值的大小即可判断）。再辅以一些逻辑运算即可实现。

其算法复杂度依然是logN，而且由于每次二分时判断次数较多，所以最高项系数也不会更小。（但是若考虑到对于特大数组的缓存问题，一次二分法应该还是会比两次二分法性能好一些，不过不是优在算法，而是优在底层硬件支持）

我自己没有去实现（时间有限），在此贴一个热门回答的代码供参考：

```c++
int search(vector<int>& nums, int target) {
    int lo = 0, hi = nums.size() - 1;
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        if ((nums[0] > target) ^ (nums[0] > nums[mid]) ^ (target > nums[mid]))
            lo = mid + 1;
        else
            hi = mid;
    }
    return lo == hi && nums[lo] == target ? lo : -1;
}
```

## 小结

最近是同时在学习OS基本原理的。学过CPU虚拟化后，就知道了进程调度模型；学了内存虚拟化之后，就知道堆栈分配以及缓存优化问题。故此对算法的优化也有了更深入的体会。

内功这东西，外行看不出来深浅；但只有真的钻研进去了，才会感受到其强大之处。
