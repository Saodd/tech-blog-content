```json lw-blog-meta
{"title":"LeetCode[160]: 相交链表","date":"2019-12-09","brev":"数据结构：链表(9/10)。简单难度。","tags":["算法与数据结构"],"path":"2019/191209-LeetCode-160.md.4b2abb377271f5ea5201"}
```



## 读题

```text
编写一个程序，找到两个单链表相交的起始节点。

注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/intersection-of-two-linked-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

## 分析

题目还是挺简单的。

哈希表暴力法肯定是不可取的。根据之前的链表解题经验，我们可以将A链表收尾相连做成环，然后判断B链表是否有环（如果有环，说明他们相交了！），然后找出B链表上环的起始点，就是交点了。后面这部分其实就是`LeetCode[142]`的算法。

## 实现

```go
func getIntersectionNode(headA, headB *ListNode) *ListNode {
    if headA == nil || headB == nil {
        return nil
    }
    // 找到A链表的尾部
    var tailA = headA
    for ; tailA.Next != nil; tailA = tailA.Next {
    }
    // 把A链表收尾相连做成环，最后要恢复原样
    tailA.Next = headA
    defer func() { tailA.Next = nil }()
    // 142题算法
    return detectCycle(headB)
}
```

手写时间（本函数加上重写142题函数）：8.5分钟。

提交成绩：

```text
执行用时 :36 ms, 在所有 golang 提交中击败了100.00%的用户
内存消耗 :7.1 MB, 在所有 golang 提交中击败了15.08%的用户
```

测试用例：太简单，没测试。

## 其他思路

看到官方题解中，另一种思路是利用步长的规律。

让两个指针a、b分别从A、B头部出发；当a到达终点时继续从B链表走，当b达到终点时继续从A链表走。如果两条链表相交，那a、b一定会在某个点上相遇，这个点就是交点；如果不相交，就会走到终点nil。

实现：

```go
func getIntersectionNode(headA, headB *ListNode) *ListNode {
    if headA == nil || headB == nil {
        return nil
    }
    var a, b = headA, headB
    var goA, goB = true, true
    for goA || goB {
        if a.Next == nil {
            a = headB
            goA = false
        } else {
            a = a.Next
        }
        if b.Next == nil {
            b = headA
            goB = false
        } else {
            b = b.Next
        }
    }
    for a != nil {
        if a == b {
            return a
        }
        a = a.Next
        b = b.Next
    }
    return nil
}
```

提交成绩：

```text
执行用时 :40 ms, 在所有 golang 提交中击败了100.00%的用户
内存消耗 :7.1 MB, 在所有 golang 提交中击败了14.57%的用户
```
