```json lw-blog-meta
{"title":"LeetCode[35]: 搜索插入位置","date":"2019-08-20","brev":"简单难度。如果弄懂了二分法的关键，这种题目就非常简单了。","tags":["算法与数据结构"],"path":"2019/190820-LeetCode-35.md.410347a79128920c79a5"}
```



## 读题

```text
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。
如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

你可以假设数组中无重复元素。

示例 1:

输入: [1,3,5,6], 5
输出: 2

示例 2:

输入: [1,3,5,6], 2
输出: 1

示例 3:

输入: [1,3,5,6], 7
输出: 4

示例 4:

输入: [1,3,5,6], 0
输出: 0

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-insert-position
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

总的思路非常简单，就是在一个标准的二分查找的基础上，修改一下未命中的情况的处理即可。

但是如何处理呢，要对二分法三个变量理解透彻才行。

## 实现

```go
func searchInsert(nums []int, target int) int {
    var lo, hi, mid int
    for lo, hi = 0, len(nums)-1; lo <= hi; {
        mid = lo + (hi-lo)/2
        switch {
        case nums[mid] > target:
            hi = mid - 1
        case nums[mid] < target:
            lo = mid + 1
        default:
            return mid
        }
    }
    return lo
}
```

代码非常简单，命中了会在循环内部return，未命中就会跳出循环。

跳出循环时，首先我们知道`lo`是比`hi`大1的。那么此时lo代表着什么含义呢？

```go
case nums[mid] < target:
    lo = mid + 1
```

因为：

- `nums[lo-1] < target`，由`if nums[mid] < target {lo = mid + 1}`这个判断条件可得；
- `nums[hi+1] > target`，由`if nums[mid] > target {hi = mid - 1}`这个判断条件可得；
- 循环结束时，有`lo == hi+1`

所以：

- `nums[lo] == nums[hi+1] > target`
- `nums[lo-1] < target`

所以lo就是第一个大于target的索引，即未命中情况下，应该插入的位置。

提交成绩：

```text
执行用时 :4 ms, 在所有 Go 提交中击败了96.76%的用户
内存消耗 :3.1 MB, 在所有 Go 提交中击败了42.46%的用户
```

测试用例：

```go
{
    name: "中间命中",
    args: args{[]int{1, 3, 5, 6}, 5},
    want: 2,
},
{
    name: "左侧命中",
    args: args{[]int{1, 3, 5, 6}, 1},
    want: 0,
},
{
    name: "右侧命中",
    args: args{[]int{1, 3, 5, 6}, 6},
    want: 3,
},
{
    name: "中间未命中",
    args: args{[]int{1, 3, 5, 6}, 2},
    want: 1,
},
{
    name: "右侧未命中",
    args: args{[]int{1, 3, 5, 6}, 7},
    want: 4,
},
{
    name: "左侧未命中",
    args: args{[]int{1, 3, 5, 6}, 0},
    want: 0,
},
```
