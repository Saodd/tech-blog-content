```json lw-blog-meta
{"title":"实战项目：价格监视程序","date":"2019-09-17","brev":"调用外部REST获取数据，用钉钉推送消息，本地使用Redis保存配置，提供REST接口来修改配置。一个工作日内全部搞定。","tags":["Golang","Python"],"path":"2019/190917-实战项目-价格监视程序.md.4870eb74a8ceb434d443"}
```



## 业务背景

公司的比特币交易员有个需求，因为比特币是24小时交易，而且价格波动大。因此希望能够有一个价格预警的机制，如果当前价格超过指定的价格范围，就以适当的形式提醒交易员。

## 需求分析

首先外部的信息源是某加密货币期货交易平台，提供REST接口，只需要一个GET方法就可以获取json数据。

第二，推送预警消息的渠道我选择钉钉。设置一个群机器人，正常情况推送当前价格，预警情况就艾特相应的交易员。钉钉机器人也是Webhook，通过POST一个json数据体来实现消息的推送。

第三，主体程序我选择Golang。一方面练手是很重要的原因，另一方面也是看重编译后的可执行文件没有任何依赖，方便部署。

第四，配置文件我选择Redis。还有一种思路是在公司的NFS上建一个配置文件，通过文件来保存配置。但是我放弃了，因为网盘还是不够方便，我使用Redis只需要一个IP地址就可以了。

第五，修改配置我选择Flask设置REST接口。毕竟要直接修改Redis内的数据还是比较麻烦的（交易员的编程知识毕竟有限），所以以REST的形式封装好，通过浏览器就可以进行操作是最好的。不过我这里并不是真正的REST，是只有GET方法的Http服务器而已，因为浏览器发送POST请求还是麻烦的。

基于以上五点构思，我搭建一个还算满意的程序架构：

```text
交易平台   -------->    --------     
                       |       |        ----------
  钉钉    <--------    | 主程序 |  --->  |        |
    |                  ---------        |        |
    |                                   | Redis  |
    ↓                  ----------       |        |
 交易员   -----------> |  Flask  |  ---> |        |
                       ----------        ---------

```

> 最近学了一个新词叫做『面向简历编程』，可以指贬义，但是我更倾向于认为它是一个中性词。虽然作为打工仔，但是打工仔也是有自己的考虑的，不可能为公司无私奉献吧？  
> 我认为，在不明显危害公司业务的情况下，尽可能选择有价值的新技术应用到项目中，是程序员对自己职业生涯的负责任态度（程序员不应该被现有的项目技术栈牵着鼻子走）；同时，对于公司来说，未必就是坏事。  
> 当然，如果是想要一直压制程序员岗位工资水平的垃圾公司，我就无话可说了。

## 实现：主程序

首先是从交易平台中获取数据了。使用GET方法获取一个json数据包，对其进行反序列化：

```go
// 反序列化数据结构
type apiResponse struct {
    Status string          `json:"status"`
    Tick   apiResponseData `json:"tick"`
}

type apiResponseData struct {
    Data []map[string]interface{} `json:"data"`
}

// 功能函数
func getBtcPrice() (currentPrice float64, err error) {
    // 生成url
    params := url.Values{}
    params.Set("xxx", "xxx")
    u, _ := url.Parse("https://api.xxx.com/market/trade")
    u.RawQuery = params.Encode()

    // Get请求
    resp, err := http.Get(u.String())
    if err != nil {
        log.Printf("Get from xxx.com Failed: %s", err)
        return
    }
    defer resp.Body.Close()

    // json解码
    decoder := json.NewDecoder(resp.Body)
    var js apiResponse
    err = decoder.Decode(&js)
    if err != nil {
        log.Printf("Parse json Failed: %s", err)
        return
    }

    // 获取所需的部分（价格）
    priceStr, ok := (js.Tick.Data[0]["price"]).(string)
    if !ok {
        log.Printf("Parse price Failed: %v", js.Tick.Data[0]["price"])
        return
    }
    currentPrice, err = strconv.ParseFloat(priceStr, 64)
    if err != nil {
        log.Printf("Parse price-str to float Failed: %s", priceStr)
        return
    }

    return
}
```

取得了当前的市场价格，接下来我们与预先设置的价格范围进行比较：

```go
type redisCheckRecord struct {
    UpLimit         float64 `json:"up_limit"`
    DownLimit       float64 `json:"down_limit"`
    LastWarningTime int64   `json:"last_warning_time"`
    LastCheckTime   int64   `json:"last_check_time"`
}

func CheckRedis(price float64) (record *redisCheckRecord, is_success bool, err error) {
    // 从Redis中查找
    rd := redis.NewClient(&redis.Options{Addr: "192.168.1.242:6379"})
    defer rd.Close()
    got := rd.Get("xxxxxxxxxxxxx")
    err = got.Err()
    if err != nil {
        log.Printf("Get Redis Failed: %s", err)
        return
    }

    // 反序列化
    record = &redisCheckRecord{}
    json.Unmarshal([]byte(got.Val()), record)

    // 比较
    if price > record.DownLimit && price < record.UpLimit {
        is_success = true
    }
    return
}
```

无论价格是否超出范围，都通过钉钉推送消息；如果超出了范围，就艾特交易员。那么主体逻辑函数如下：

```go
func main() {
    // 从xxx上获取当前价格
    price, err := getBtcPrice()
    if err != nil {
        SendDingtalk(fmt.Sprintf("Failed to get price: %s", err), []string{"138xxxxxxxx"})
        os.Exit(-1)
    }

    // 检查当前价格是否在范围内
    record, ok, err := CheckRedis(price)
    if err != nil {
        SendDingtalk(fmt.Sprintf("Failed to compare price: %s", err), []string{"138xxxxxxxx"})
        os.Exit(-1)
    }
    fmt.Println(record, ok)

    // 准备dingtalk的消息内容
    var msgText string
    var at []string
    var now int64 = time.Now().Unix()
    if !ok {
        msgText = fmt.Sprintf("WARNING!\n xxx price %.2f, limit(%.2f, %.2f)", price, record.DownLimit, record.UpLimit)
    } else {
        msgText = fmt.Sprintf("OK!\n xxx price %.2f", price)
    }
    // 每个小时只预警一次，防止信息污染。通过时间来进行计算。
    if !ok && (now > record.LastWarningTime+3600) {
        at = []string{"175xxxxxxxx"}
        UpdateRedis(record, true)
    } else {
        at = []string{}
        UpdateRedis(record, false)
    }
    fmt.Println(msgText, at)

    // 发送dingtalk消息
    SendDingtalk(msgText, at)
}
```

Go程序果然是满屏的`if err!=nil`……虽然早就有心理准备，不过还是觉得哭笑不得……不过每写下一段错误检查代码，都会让我对这个程序的可靠性提高两分。

接下来打开一个Linux-Golang的容器进行编译，然后上传到服务器上，设置一个crontab任务就ok了！

## 实现：Flask程序

选择Flask是由于它可以很轻量、很快捷地实现一个REST接口。虽然go-gin（甚至直接用go的标准http包）更轻量，但是考虑到一些json操作用go语言还是相对有些麻烦，而且我对这个REST接口可靠性要求并不高，所以还是选择了Flask。

考虑到用户体验，我希望用户能够直接在浏览器中输入一个url就可以完成操作，而不用掏出什么curl或者postman之类的工具来构建一个POST请求。

所以我并没有按标准的REST思想来构建路由：

```python
redis_pool = redis.ConnectionPool(host="192.168.1.242", port="6379", db=0)

# 查询
@app.route("/xxx/xxxx")
def Quarterly_Price():
    rd = redis.Redis(connection_pool=redis_pool)
    got = rd.get("xxxxxxxxxxxxxxxxxxx")
    js = json.loads(got)
    js["last_warning_time"] = datetime.fromtimestamp(js["last_warning_time"], tz_utc8)
    js["last_check_time"] = datetime.fromtimestamp(js["last_check_time"], tz_utc8)

    df = pandas.DataFrame(data=js, index=[0])
    return df.to_html()

# 修改
@app.route("/xxx/xxxx/set/<string:key>/<int:value>")
def Quarterly_Price_Set(key: str, value: int):
    key = key.lower()
    if key == "up":
        key = "up_limit"
    elif key == "down":
        key = "down_limit"
    else:
        return "错误的输入，请输入up或者down"
    # 获取当前配置
    rd = redis.Redis(connection_pool=redis_pool)
    got = rd.get("xxxxxxxxxxxxxxxxxxx")
    # 修改配置
    js = json.loads(got)
    js[key] = value
    rd.set("xxxxxxxxxxxxxxxxxxx", json.dumps(js))
    # 重新获取配置，以确认修改成功
    got = rd.get("xxxxxxxxxxxxxxxxxxx")
    js = json.loads(got)
    df = pandas.DataFrame(data=js, index=[0])
    return "修改%s成功" % key + df.to_html()
```

## 小结

在任务调度方面，我也考虑过celery这个大杀器，不过还是觉得对于这个小项目来说太复杂了……

不过为什么会考虑Celery呢？因为有一个可靠性的需求：要有一个监督机制，如果上次查询价格失败了，也就是程序运行异常了，要能够及时的发现并且通知相关人员。考虑Celery，是因为它用python实现，可以很容易地加入所需要的逻辑判断条件（用shell脚本我是拒绝的）

总的来说，这个项目就完成了。运行了好几天，一切正常，该有的预警都出现了，处理得很完美。

值得一吹的是，我的开发速度非常快，我一个人用两个半天（一个整天）就完成了从需求分析到编译部署的全部过程。

一方面是由于我对Linux环境以及Docker的运用已经达到了一个相当熟悉的程度，另一方面（我认为）也是由于在学习了算法与OS之后在视野上的巨大提升。

再接再厉。
