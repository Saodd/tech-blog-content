```json lw-blog-meta
{"title":"OS学习笔记49：分布式：网络文件系统NFS","date":"2019-09-10","brev":"远程调用解决了，接下来是远程储存。","tags":["OS"],"path":"2019/190910-OS学习笔记49.md.75c04b3befa7e687c563"}
```



# 第四九章 <Sun’s Network File System (NFS)>

[PDF链接](http://pages.cs.wisc.edu/~remzi/OSTEP/dist-nfs.pdf)

为什么要将数据集中在服务器上？好处有三点：`共享sharing`、`集中管理centralized administration`和`安全性security`。

**关键问题：如何构建一个分布式文件系统？有哪些容易出错的地方，有哪些经验可以借鉴？**

## 49.1 一个基础的分布式文件系统

在客户端，要使用`客户端文件系统client-side file system`。客户端上的应用程序通过systemcall来访问该文件系统，而具体的网络通信操作在文件系统内部实现（即网路文件系统对上层是透明的）。

> 译者注：想象一下mount挂载共享盘的用法。使用mount工具时，需要指定对应的文件系统类型，这样就会使用对应的驱动程序来与目标盘建立连接；这个驱动程序就是我们所谓的文件系统了，mount将这个新的文件系统挂载到当前OS的目录树中，就可以当作普通的文件一样使用了。

![Figure 49.1](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-09-10-Fig-49-1.png)

以上就是NFS的架构了。

## 49.2 NFS

最早是由Sun公司提出的，在设计之初就将其定义为`开放协议open protocol`，即只规定客户端与服务端的通信格式。因此NFS获得了广泛的成功。

## 49.3 关注：简单并快速的服务端故障恢复

我们主要关注第二版本的NSF（即NFSv2，v3有小改，v4有大改）。

v2的主要目标是设计一个简单、并且能快速从故障中恢复的协议。假想的环境是多客户端-单服务器模型，在此模型下，只要服务器正常，整个系统就正常。

## 49.4 关键：无状态

为了实现上述目标，设计了`无状态stateless`协议。（即服务器不管哪个客户端打开了哪个文件，缓存了哪个区块。）每次请求时都要附带完整的信息。

我们先看一下`有状态stateful`协议。我们之前所学的open()之后再逐次read()，每次读取都是有状态的，是从上一次缓冲位置继续的。

这种有状态的协议，在故障恢复时是非常麻烦的。

## 49.5 NFSv2

首先要了解`文件句柄file handle`，它用来唯一地描述一个文件或者目录，申请IO的时候必须要使用它。

你可以想象文件句柄有三个重要成分：一个卷辨识器、一个节点编号、一个版本编号。卷用来区分文件系统，节点编号是在文件系统内部进行定位，而版本编号是防止复用这个节点时产生的错误。

常用的协议方法有：

```text
NFSPROC GETATTR     file handle
                    returns: attributes
NFSPROC SETATTR     file handle, attributes
                    returns: –
NFSPROC LOOKUP      directory file handle, name of file/dir to look up
                    returns: file handle
NFSPROC READ        file handle, offset, count
                    data, attributes
NFSPROC WRITE       file handle, offset, count, data
                    attributes
NFSPROC CREATE      directory file handle, name of file, attributes
                    –
NFSPROC REMOVE      directory file handle, name of file to be removed
                    –
NFSPROC MKDIR       directory file handle, name of directory, attributes
                    file handle
NFSPROC RMDIR       directory file handle, name of directory to be removed
                    –
NFSPROC READDIR     directory handle, count of bytes to read, cookie
                    returns: directory entries, cookie (to get more entries)
```

## 49.6 协议部署到系统

首先，由客户端来追踪所有的状态（服务器是无状态的）.

第二，注意一下服务端何时发生交互。比如`open("/home/remzi/foo.txt")`，客户端要发送三次LOOKUP命令。比如close时候不需要交互。

第三，注意每个请求都要包含所需的全部信息。

## 49.7 基于幂等性来处理服务端故障

> `幂等性Idempotency`在构建一个可靠的系统时非常有用。因为你可以没有任何代价地进行重试。

客户端发出的请求，可能会没有任何回应。原因会有很多，那么如何处理？很简单，重试就行了。超时就重试。

幂等性操作是重试的关键。但是有些操作不是幂等性的，比如创建目录：第一次创建会成功，第二次会提示你目录已经存在。

## 49.8 改善性能：客户端缓存

很简单，读取过来以后在客户端内存（或硬盘）中保留一会儿就行了。

至于写入操作更好，同样使用写入缓存。

## 49.9 缓存一致性问题

缓存会带来一致性问题：假如A客户端读取并缓存了某个文件，而B客户端此时更新了该文件，当A重新读取时，缓存中还是旧的文件内容。

我们也可以将这个一致性问题称为`更新可见性update visibility`和`过期缓存stale cache`问题。

NFSv2使用两个办法来解决这两个问题。首先是`flush-on-close`用来解决更新可见性问题，即close()的时候将所有的脏数据推送到服务器端。

然后是在每次访问缓存之前都要先查询一下，验证缓存的有效性，以此解决过期缓存问题。
但是这会导致一个问题，验证操作太多了，服务器会接收太多的验证请求。

为了减少请求数量，在每个客户端上使用`分布式缓存attribute cache`。请求文件时依然会进行验证，但会优先向分布式缓存中验证；而分布式缓存有一个确定的有效期（比如3秒），超时才会向服务器更新。（译者注：其实就是一个延时请求的设计）

## 49.10 NFS缓存一致性

前面提到的`flush-on-close`方案以及客户端缓存方案，并不完善，有时会导致奇怪的问题！

## 49.11 服务端写入缓存的意义

网络文件系统的服务器一般会选性能比较高的，会有充足的缓存空间，因此可能很多IO操作都会基于缓存。

但是在应对一些连续的写入操作时，有时行为会变得奇怪。因此服务端在接收写入请求时，会确定写入的数据成功地持久化了，才会返回给客户端。

但是这就会带来写入性能问题。有些公司的方案是将写入请求缓存在一个有后备电源的内存中，写入这个缓存后就可以快速地返回给客户端了。另一种方案就是选用写入速度很快的文件系统。

## 49.12 小结

NFS（v2）的设计目标是应对服务器端的故障，解决思路是通过精心设计的协议规则；基于幂等性原则，客户端可以轻易地进行重试。

我们还介绍了缓存问题，但是NFS解决的并不完美，偶尔会有奇怪的行为。

最后我们看了写入性能问题。

其实还有安全性问题我们没有讨论。早期的NFS在安全性上非常的松懈，客户端可以很轻易地模仿其他用户，以此获得任意的访问权限。后期在安全性上做了改进。
