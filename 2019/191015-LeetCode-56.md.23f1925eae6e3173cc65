```json lw-blog-meta
{"title":"LeetCode[56]: 合并区间","date":"2019-10-15","brev":"中等难度。","tags":["算法与数据结构"],"path":"2019/191015-LeetCode-56.md.23f1925eae6e3173cc65"}
```



## 读题

```text
56. 合并区间

给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-intervals
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

好久没做算法题，有点生疏了。

### 第一个想法

当然是暴力法，从前向后遍历，每个元素都与前面所有的元素进行比较，如果有重叠的部分就计算并集，然后删掉当前元素。

删除元素可以稍微优化一下，即把当前元素与末尾元素交换，就不需要对后部分整体移动了。

但是这有个很致命的问题，即前面的元素更新会产生连锁反应。例如，1和2本来不相交，但是4和1合并之后，并集可能又和2号相交了，这就意味着我需要每次合并之后都从头开始遍历。

那时间复杂度可能是三次方了。

### 改进想法

既然后面的结果会对前面产生影响，那改进的想法就是排序。

我们根据每个区间（元素）的起始端点（即`intervals[i][0]`）作为比较值，来进行排序。可以想象一下，如果任意区间之间有重叠的话，那它们一定是按顺序相连的。

## 实现

### 实现排序

由于go还没有泛型，所以我们掏出原来写的`int`快排算法改造一下，用于`[]int`排序：

```go
// 快速排序 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
func QuickSortInterval(li [][]int) {
    if len(li) == 0 {
        return
    }
    quickSortInterval(li, 0, len(li)-1)
}

func quickSortInterval(li [][]int, lo, hi int) {
    stack := quickSortStackInterval{}
    stack.Push(lo, hi)
    for stack.Len() > 0 {
        x, y, _ := stack.Pop()
        mid := quickSortIntervalPartition(li, x, y)
        if mid-x > 15 {
            stack.Push(x, mid-1)
        } else if mid-x > 1 {
            quickSortIntervalSelectSort(li, x, mid-1)
        }
        if y-mid > 15 {
            stack.Push(mid+1, y)
        } else if y-mid > 1 {
            quickSortIntervalSelectSort(li, mid+1, y)
        }
    }
}
// 后面省略，可以到https://github.com/Saodd/leetcode-algo去找
```

### 实现算法

有了排序那一切都好办了。排序之后我们按照前面说的逻辑来进行判断，即：

- 记录『当前合并区间』，如果『当前区间』的头部在合并区间内，那就将尾部更新到合并区间内；
- 如果『当前区间』的头部不在合并区间内，那就将上一个合并区间保存起来，新开一个合并区间。

```go
func merge(intervals [][]int) [][]int {
    if len(intervals) < 2 {
        return intervals
    }
    QuickSortInterval(intervals)

    var merges = make([][]int, 0)
    var merge []int = []int{intervals[0][0], intervals[0][1]}
    for i := range intervals {
        left, right := intervals[i][0], intervals[i][1]
        if left <= merge[1] {
            if right > merge[1] {
                merge[1] = right
            }
        } else {
            merges = append(merges, merge)
            merge = []int{left, right}
        }
    }
    merges = append(merges, merge)
    return merges
}
```

### 提交成绩

```text
执行用时 :12 ms, 在所有 golang 提交中击败了92.17%的用户
内存消耗 :4.8 MB, 在所有 golang 提交中击败了100.00%的用户
```
