```json lw-blog-meta
{"title":"OS学习笔记09：CPU虚拟化的上层实现-完全公平调度","date":"2019-08-13","brev":"介绍几个不同的调度器，它们不为周转时间和响应时间优化，而是按比例分配。","tags":["OS"],"path":"2019/190813-OS学习笔记-09.md.0b866dbe38ff6701fc59"}
```



# 第九章 <CPU调度：比例共享调度>

[PDF链接](http://pages.cs.wisc.edu/~remzi/OSTEP/cpu-sched-lottery.pdf)

`比例共享Proportional Share`也称为`公平分享fair-share`。思路很简单：不为周转时间和响应时间优化，而保证每个任务获得确定的CPU时间比例。

最出色的例子是`抽签调度lottery scheduling`，思路是，每隔一段时间，抽签决定接下来执行哪个任务；那些应该更多运行的任务会被设定更大的中奖概率。

关键问题：如何按比例进行调度？关键点是什么、性能如何？

## 9.1 基础概念：票数 Tickets Represent Your Share

`票数tickets`代表一个进程应该获得的调度时间比例。

抽签调度是以概率来实现的（而不是确定性的）。首先调度器要知道总票数是多少，然后抽奖，哪个任务持有中将号码那就执行哪个。

> 使用`随机数Randomness`来实现抽签调度是最棒的，它简单，轻量，执行效率高，并且可以避免极端特殊案例的影响。

## 9.2 选票机制 Ticket Mechanisms

抽签调度提供了很多种机制来管理`选票ticket`.

比如`选票币种ticket currenct`的概念。每个用户可以定义自己的`币种currenct`，调度器在抽签的时候，会自动将各个币种转换为`全局货币global currency`。

举个例子，系统中有用户A、B，他们分别拥有100元全球货币。A用户定义了两个任务并分别安排了500元A货币，B用户定义了一个任务并安排了10元B货币。此时，这三个任务分别拥有的全球货币量为(A1:50, A2:50, B1:100)：

```text
User A -> 500 (A’s currency) to A1 -> 50 (global currency)
       -> 500 (A’s currency) to A2 -> 50 (global currency)

User B -> 10 (B’s currency) to B1 -> 100 (global currency)
```

另一个机制是`选票转账ticket transfer`，进程可以把自己的选票转让给另一个进程。

还有一种机制`选票膨胀ticket inflation`，进程可以调整自己的选票数，但是这必须在一群互相信任的进程之间才可以应用。

## 9.3 实现

实现起来非常简单，我们只需要一个好的随机数生成器、一个系统用来保存进程信息的结构体、以及选票总数。

```c
// counter: used to track if we’ve found the winner yet
int counter = 0;

// winner: use some call to a random number generator to
// get a value, between 0 and the total # of tickets
int winner = getrandom(0, totaltickets);

// current: use this to walk through the list of jobs
node_t *current = head;
while (current) {
    counter = counter + current->tickets;
    if (counter > winner)
        break; // found the winner
    current = current->next;
}
// ’current’ is the winner: schedule it...
// 确保进程数组有序，将大的选票数放前面，有利于遍历性能的提升
```

## 9.4 例子

我们定义两个任务，有相同的票数和需要相同的执行时间。我们希望两个任务大约同时完成。
我们定义一个`不公平系数unfairness metric`来量化他们的完成时间的差异，U=先完成的时间/后完成的时间。

![Figure 9.1](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-08-13-Fig-9-1.png)

可以看到，任务所需的时间片越多，不公平系数就会越高。

## 9.5 如何分配选票

这个问题很重要。

一种思路是让用户自己定义。但是这并不能解决问题。

## 9.6 为何不用确定性呢

随机数偶尔会导致不正确的分配，为了解决这个提出了`步幅调度stride scheduling`，一种确定性的公平调度器。`步幅调度`很简单：每个任务有一个`步幅`，是与它的选票比例相反的一个数字。

比如三个任务有100,50,250的选票，我们用10000分别除以选票数，得到100,200,40，这三个就是步幅。每当一个进程得到调度的时候，我们给他的计数器增加（这个计数器叫做`行程pass`）。`行程`以0为初始值。

于是调度器就变成了，每次选取`行程pass`最小的那个任务来执行，然后给它的`行程pass`递增一个`步幅stride`。

```go
// 伪代码
curr = remove_min(queue); // pick client with min pass
schedule(curr); // run for quantum
curr->pass += curr->stride; // update pass using stride
insert(queue, curr); // return curr to queue
```

![Figure 9.3](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-08-13-Fig-9-3.png)

可以看到，`步幅调度`能够很精确地按比例分配执行时间。那么为什么还需要`抽签调度`？很简单，因为抽签调度没有`全局状态global state`。比如，当三个任务交替运行了很长时间，突然加入了一个新的任务，那么新的任务应该设置多少`行程`？如果设为0的话，那它就要独占CPU很长时间了。

## 9.7 Linux的完全公平调度器

`完全公平调度器Completely Fair Scheduler(CFS)`是现在的Linux采用的代替方法，既能保证公平，又能兼顾效率和规模。

有研究表明，调度器会用掉5%的总CPU，所以性能很重要。`CFS`它有精巧的设计和完美适配的数据结构，以达到性能目标。

### 基本操作 Basic Operation

前面介绍的调度器，都是将`时间片time slice`设为固定值；而CFS不同，它将CPU均等地分配给所有进程，通过一种`基于计数counting-based`的技术称为`虚拟运行时virtual runtime`(vruntime)。

当进程运行，会积累`虚拟运行时vruntime`。在正常情况下，是与物理时间成正比的。于是每次调度器选取虚拟运行时最小的那个来执行。

问题来了：调度器怎么知道什么时候切换进程？

CSF用多个参数来控制。首先是`调度延时sched_latency`，这个值用来计算每个进程在每次调度中运行多长时间。典型值可能是48ms，去除以进程总数，得到运行时间。

比如有4个进程，那么每个进程的时间片就是12ms。那么调度器执行第一个任务，直到它的vruntime达到12ms，然后检查有没有vruntime低于12ms的任务来切换。

![Figure 9.4](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-08-13-Fig-9-4.png)

如果太多进程怎么办？用`最小粒度min_granularity`，典型值可能是6ms，时间片不会被设置为低于最小粒度的值。

注意，CFS使用一个周期性的计时器中断，意味着只有在固定的时间间隔上CFS才能唤醒。这个间隔一般比较短（1ms），唤醒后CFS会检查当前进程是否用完了vruntime。

### 权重 Weighting (Niceness)

CFS也支持进程优先级，但不是通过`选票ticket`，而是通过经典的Unix机制即所谓的`nice`等级。nice的范围是(-20,+19)，默认为0，正数是低优先级而负数是高优先级。

> 哎呀，如果你太优秀了(nice值较大)，那你就会被调度器冷漠对待了……

```c
// CFS将nice映射为权重：
static const int prio_to_weight[40] = {
/* -20 */ 88761, 71755, 56483, 46273, 36291,
/* -15 */ 29154, 23254, 18705, 14949, 11916,
/* -10 */ 9548, 7620, 6100, 4904, 3906,
/* -5 */ 3121, 2501, 1991, 1586, 1277,
/* 0 */ 1024, 820, 655, 526, 423,
/* 5 */ 335, 272, 215, 172, 137,
/* 10 */ 110, 87, 70, 56, 45,
/* 15 */ 36, 29, 23, 18, 15,
};
```

![Formula 9.1](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-08-13-Fml-9-1.png)

假设任务A的nice为-5，B为默认值0.那么计算可得A的时间片为36ms，B的时间片为12ms。

同时，在积累vruntime的时候，权重也会生效（权重越高的积累速度越慢）

![Formula 9.2](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-08-13-Fml-9-2.png)

有一个巧妙的地方是，上面的权重映射表中，如果两个进程的nice之差固定，那么进程的时间片权重比例是固定值。（即-5/0和5/10的表现完全相同）。

### 使用红黑树 Using Red-Black Trees

当进程很多的时候，遍历代价很大。所以CFS使用`红黑树Red-Black Trees`，把进程信息的结构体都保存在红黑树中。

红黑树是`平衡树balanced trees`的一种，与简单的二叉树不同，平衡树能很简单地保持较低的`层数depths`，以此保证操作都是`O(logN)`的时间复杂度（而不是线性）。

![Figure 9.5](https://cdn.jsdelivr.net/gh/Saodd/tech-blog-pic@gh-pages/2019/2019-08-13-Fig-9-5.png)

不是所有的进程都放进这个树中，只有running和runnable的才会。

> 根据需求选用合适的数据结构，是一个优秀的工程师应有的品质。

### 处理IO和睡眠进程

当进程从睡眠中恢复时，其vruntime会被设置为当前树中的最小值。

但是也会造成一个问题：一个频繁短时间睡眠的任务，会得不到它应有的CPU配额比例。

### 其他的特性

其实CFS有太多特性了，我们不一一讲解。包括改善缓存、多核CPU环境下的策略、大型进程组等等。

## 9.8 小结

没有哪种调度器是万能的，各有优劣。

# 我的小结

问：谈一下Linux环境下的任务调度器。

答：Linux使用的是叫做完全公平调度的算法。核心思想就是给每个进程积累vruntime，然后每次选出vruntime最小的进程去执行。那么有两个问题，一是如何应用权重？权重用在两个方面，一是在分配时间片的时候，权重大的进程会获得更大的时间片；二是在积累vruntime的时候，权重大的进程会更小地积累vruntime。二是如何应对从睡眠中唤醒的进程或者新的进程？只要把这个进程的vruntime设置为当前红黑树中最小值就可以了。
