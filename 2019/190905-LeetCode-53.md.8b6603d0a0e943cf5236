```json lw-blog-meta
{"title":"LeetCode[53]: 最大子序和","date":"2019-09-05","brev":"简单难度。但是如果没有想清楚其中的规律的话，很难做。","tags":["算法与数据结构"],"path":"2019/190905-LeetCode-53.md.8b6603d0a0e943cf5236"}
```



## 读题

```text
给定一个整数数组 nums ，找到一个具有最大和的连续子数组
（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

进阶:

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-subarray
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

一开始觉得很难：这样一个任意的数组，如何寻找规律？（而且一开始我以为要返回子序列，又给自己增加了负担。后来才发现只需要返回子序列的和）

所以一开始想着，假如是一个有规律的数组，比如\[正,负,正,负,正,\]这样交替的数组，那我们只要寻找以两个正数为端点的子序列，求这样的子序列中和最大的那一个。

那如何实现`O(n)`的复杂度呢？这样的复杂度是要求只能扫描一次（或者独立扫描常数次）。那么相邻的两个数字之间有什么联系吗？

假如我们把上面假设的正负交替的数组，两两组合，我们会发现：**对任意正数，只有它大于右边的负数，才能被合并到右边的子序列形成更大的子序列；只有它大于左边的负数，才能被合并到左边的子序列。**

但是这种思路还是无法用代码实现，而且对于一些极端情况也无法支持。

那么我们改进一下？从左到右遍历数组，然后分段求和。
**只有当前的区段的和大于等于零，才有资格被合并到右边去（或者说，才有资格继续向右增长）**

## 实现

```go
func maxSubArray(nums []int) int {
    if len(nums) == 0 {
        return 0
    }
    var sumMax int = nums[0]
    var group int
    for i := range nums {
        group += nums[i]
        if group < 0 {  // 如果当前区段的和小于零，就放弃这个区段（将和重置为0）
            if group > sumMax {
                sumMax = group
            }
            group = 0
        } else {  // 如果当前区段的和大于零，看看有没有超过记录的最大值，然后继续向右增长
            if group > sumMax {
                sumMax = group
            }
        }
    }
    return sumMax
}
```

逻辑弄清楚了，接下来简化一下代码，去除重复的if语句：

```go
func maxSubArray(nums []int) int {
    if len(nums) == 0 {
        return 0
    }
    var sumMax int = nums[0]
    var group int
    for i := range nums {
        group += nums[i]
        if group > sumMax {
            sumMax = group
        }
        if group < 0 {
            group = 0
        }
    }
    return sumMax
}
```

提交成绩：

```text
执行用时 :8 ms, 在所有 Go 提交中击败了90.86%的用户
内存消耗 :3.4 MB, 在所有 Go 提交中击败了29.54%的用户
```

测试用例：

```go
{
    name:"示例",
    args:args{[]int{-2,1,-3,4,-1,2,1,-5,4}},
    want:6,
},
{
    name:"全负数",
    args:args{[]int{-1,-5,-2,-7,-3,-8}},
    want:-1,
},
{
    name:"全正数",
    args:args{[]int{1,4,3,2}},
    want:10,
},
```

## 其他思路

题目中提到了『分治法』，不过我觉得分治法既不会更优雅也不会更高效，所以就没有去尝试了。

对于上述的解法，在分析中有人称其为『动态规划』，我觉得有点牵强。

不过看到一个对于这种算法的生动形象的比喻：

```text
假设你是一个选择性遗忘的赌徒，数组表示你这几天来赢钱或者输钱，
你用sum来表示这几天来的输赢，
用ans来存储你手里赢到的最多的钱，

如果昨天你手上还是输钱（sum < 0），你忘记它，明天继续赌钱；
如果你手上是赢钱(sum > 0), 你记得，你继续赌钱；
你记得你手气最好的时候

作者：acnesu
链接：https://leetcode-cn.com/problems/maximum-subarray/solution/jia-she-ni-shi-yi-ge-du-tu-by-acnesu/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
```

## 小结

找对了思路才能事半功倍。
