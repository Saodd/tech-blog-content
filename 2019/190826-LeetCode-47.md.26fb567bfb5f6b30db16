```json lw-blog-meta
{"title":"LeetCode[47]: 全排列 II","date":"2019-08-26","brev":"中等难度。还是要掏出回溯算法。","tags":["算法与数据结构"],"path":"2019/190826-LeetCode-47.md.26fb567bfb5f6b30db16"}
```



## 读题

```text
给定一个可包含重复数字的序列，返回所有不重复的全排列。

示例:

输入: [1,1,2]
输出:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/permutations-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

## 实现

与上一题是几乎相同的，不过有个很大的改变是，输入数组允许包含重复元素。

尽管之前的做法依然可以解，不过这次还是来试试回溯算法吧。

主要思想就是，从第1位到第n位迭代；每位每次选出一个数字放在这个位置上（放的意思是与后面的元素交换），然后迭代求下一位。

```go
func permuteUnique(nums []int) [][]int {
    if len(nums)==0{
        return [][]int{}
    }

    len0047 = len(nums) - 1
    temp0047 = nums
    sort.Ints(temp0047)

    result0047 = make([][]int, 0, 5)

    recurPermuteUnique(0)
    return result0047
}

var temp0047 []int
var len0047 int
var result0047 [][]int

func recurPermuteUnique(pos int) {
    if pos == len0047 {  // 最后一位添加解
        newSolution := make([]int, len(temp0047))
        copy(newSolution, temp0047)
        result0047 = append(result0047, newSolution)
        return
    }

    recurPermuteUnique(pos + 1)  // 本位不动的情况
    for i := pos + 1; i <= len0047; i++ {  // 本位与后面的位交换
        for j:=pos; j<i; j++{
            if temp0047[j]==temp0047[i]{
                goto NEXTI  // 如果有相同的数字，那就跳过
            }
        }
        temp0047[pos], temp0047[i] = temp0047[i], temp0047[pos]  // 交换数字
        recurPermuteUnique(pos + 1)  // 迭代下一位
        temp0047[pos], temp0047[i] = temp0047[i], temp0047[pos]  // 还原本位
        NEXTI:
    }
}
```

举例说明：

```text
输入：[0 0 0 1 9] 
深度1情况：[0 0 0 1 9]
深度2情况：[0 0 0 9 1]
深度3情况：[0 0 1 0 9] [0 0 1 9 0] [0 0 9 0 1] [0 0 9 1 0]
深度4情况：[0 1 0 0 9] [0 1 0 9 0] [0 1 9 0 0] [0 9 0 0 1] [0 9 0 1 0] [0 9 1 0 0]
深度5情况：[1 0 0 0 9] [1 0 0 9 0] [1 0 9 0 0] [1 9 0 0 0] [9 0 0 0 1] [9 0 0 1 0] [9 0 1 0 0] [9 1 0 0 0]
```

提交成绩：

```text
执行用时 :20 ms, 在所有 Go 提交中击败了70.54%的用户
内存消耗 :7.2 MB, 在所有 Go 提交中击败了60.00%的用户
```

测试用例：

```go
{
    name: "示例",
    args: args{[]int{1, 1, 2}},
    want: [][]int{
        {1, 1, 2}, {1, 2, 1}, {2, 1, 1},
    },
},
{
    name: "空数组",
    args: args{[]int{}},
    want: [][]int{
    },
},
{
    name: "大数重复",
    args: args{[]int{1, 2, 2}},
    want: [][]int{
        {1, 2, 2}, {2, 1, 2}, {2, 2, 1},
    },
},
{
    name: "不重复",
    args: args{[]int{1, 2, 3}},
    want: [][]int{
        {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 2, 1}, {3, 1, 2},
    },
},
{
    name: "多个重复值",
    args: args{[]int{0,1,0,0,9}},
    want: [][]int{
        {0,0,0,1,9},{0,0,0,9,1},{0,0,1,0,9},{0,0,1,9,0},{0,0,9,0,1},{0,0,9,1,0},
        {0,1,0,0,9},{0,1,0,9,0},{0,1,9,0,0},{0,9,0,0,1},{0,9,0,1,0},{0,9,1,0,0},
        {1,0,0,0,9},{1,0,0,9,0},{1,0,9,0,0},{1,9,0,0,0},{9,0,0,0,1},{9,0,0,1,0},
        {9,0,1,0,0},{9,1,0,0,0},
    },
},
```

## 其他思路

看到有一种方法，是借助一个`[]bool`来记录已经被使用的元素。每次迭代时，都从数组头部开始遍历，直到找到一个未被使用且与左边不相等的元素。

```go
func permuteUnique(nums []int) [][]int {
    if len(nums) == 0 {
        return [][]int{}
    }

    sort.Ints(nums)
    len0047 = len(nums)
    nums0047 = nums
    temp0047 = make([]int, len(nums))
    used0047 = make([]bool, len(nums))
    result0047 = make([][]int, 0, 6)

    recurPermuteUnique(0)
    return result0047
}

var nums0047 []int
var temp0047 []int
var len0047 int
var result0047 [][]int
var used0047 []bool

func recurPermuteUnique(pos int) {
    if pos == len0047 {
        newSolution := make([]int, len(temp0047))
        copy(newSolution, temp0047)
        result0047 = append(result0047, newSolution)
        return
    }
    for i := 0; i < len0047; i++ {
        if !used0047[i] {
            if i > 0 && !used0047[i-1] && nums0047[i] == nums0047[i-1] {
                continue
            }
            temp0047[pos] = nums0047[i]
            used0047[i] = true
            recurPermuteUnique(pos + 1)
            used0047[i] = false
        }
    }
}
```

但是执行效果并不好，我认为是由于每次迭代都要搜索完整的数组，访问次数太多了，并且还伴随着大量的数组写入操作（记录used信息）：

```text
执行用时 :24 ms, 在所有 Go 提交中击败了53.49%的用户
内存消耗 :8.5 MB, 在所有 Go 提交中击败了5.72%的用户
```
